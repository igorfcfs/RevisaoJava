Em um construtor, caso use super(), ele sempre vem primeiro, caso não use super() mas use this(), ele sempre vem primeiro, caso use super() e this(), super vem primeiro e this depois.

return; -> não retorna nada
return this; retorna um objeto do tipo de retorno do metodo?

sobrecarga(Overload) X sobrescrita(Override)
Assiatura do método igual

javac X.java
java X <args>

There are three types of variables in Java: Local, Instance, and Static.

A local variable in Java is a variable that's declared within the body of a method.

Instance variables in Java are non-static variables which are defined in a class outside any method, constructor or a block. Each instantiated object of the class has a separate copy or instance of that variable. An instance variable belongs to a class.

When a variable is declared static in Java programming, it means that the variable belongs to the class itself rather than to any specific instance of the class.

final keyoword
variables -> means that the value cannot change
methods -> means that the method cannot be overrided

abstract keyoword
class -> means that the class cannot be instantiated
method -> means that the method needs to be overrided



In Java, an initializer is a block of code that has no associated name or data type and is placed outside of any method, constructor, or another block of code

Static initializer block
class X{
	static {System.out.println();}
}

Instance initializer block.
class X{
	{System.out.println();}
}

Order of initialization when we create a class instance
1. Variables creations
2. Static initializer block
3. Instance initializer block
4. Constructor


java uses a period . to separate packages.
javac takes a .java file and returns a .class file.



static public void main(String[] args){} = public static void main(String[] args){}


questoes simulado 2 duvida
77
81
83 -> decorar
86 -> decorar
87 -> decorar
88
89 -> decorar
93 -> decorar
109 -> decorar dms


abstract final class A{} //impossible
final -> the class cannot be extended
abstract -> the class cannot be instantiated


The protected, package-private, and public access modifiers can each be applied to abstract methods.

concrete class x abstract class x interface
concrete class -> cannot have abstract methods
abstract class -> can have both, concrete and abstract methods
interface -> can have only abstract methods, excepted by default method

double value;
int getValue() {return value;} //valido, auto-casting

inteiro: autocasting para int
local variables need being initialized always

Valores padrao de atributos
String = null
boolean = false
int = 0
double = 0.0



Strings sao imutaveis, StringBuilder nao
    String movie = "The";
    movie.concat(" ").concat("MATRIX".toLowerCase());
    System.out.print(movie.substring(5,6));


no switch statement o unico tipo nao permitido e float ou double

bytecodes in java -> .class extension
.java extension is the file

lenient -> amplo, aberto

Arrays and arraylist are muttable


Compare Strings
String pool X String...
StringBuilder
Interface
Encapsulation, Inheritance and Polimorfism
Operators Precedence
Java Data Types
Return types
Exceptions -> Checked(need do be treated) & Unchecked(doesn't need to be treated)
Lambda & Predicates
Garbage Collector(GC)
LocalDate, LocalDateTime, Calendar, Period

Hiding X Overriding
hide variables
hide static methods
override instance methods

!b++ > 100 -> error
!(b++ > 100) -> no error

public interface Predicate<T> {
	boolean test(T t);
}


Illegal combination
static abstract

Interface
static - tem corpo
default - metodo abstrato com corpo
abstract - nao tem corpo (padrao)

String/StringBuilder -> .length()
Array -> .length
List -> .size()

Emptying a StringBuilder:
StringBuilder bucket = new StringBuilder("Empty me!");
bucket.delete(0, bucket.length());

varargs -> must be the last parameter of a method -> int x, String... y

Polimorfismo
Atributos -> A esquerda sempre prevalece, se não achar na esquerda, ai sim procura na direita
Métodos -> A direita sempre prevalece, se não achar na esquerda, ai sim procura na esquerda
X x = new Y();
x.x;

fields are attributes that are instance variables

IOExcepcion is checked

Bibliotecas java
java.util -> List
java.util.function -> Predicate
java.time -> LocalDateTime, LocalDate, LocalTime
java.time.format -> DateTimeFormatter, Period


Variaveis
Locais -> void x(int x)
Globais -> String s;
Instâcia -> private int x;
Classe -> private static int x;
Constante -> private final int CONST;
Constante -> private static final int CONST;

wheter = if

Arrays
Arrays.toString(args) -> se args for vazio retorna []
Arrays.sort() -> ?
Arrays.binarySearch() -> ?
System.arraycopy() -> ?

StringBuider

break so e permitido em loops ou switch
labeled break -> magic: if(qty <= 0) break magic; -> Sem problemas

Math.random() -> ?

An instance variable can only be referenced from instance methods in the class.
A static variable can be referenced from any method

intance -> instance
static -> static & instance

Import
Date
java.util.*;
java.sql.*; //nao compila

java.util.Date;
java.sql.*; //compila

java.util.Date;
java.sql.Date; // nao compila

java.util.Date;
Date date;
java.sql.Date dateSql;//compila usando as duas

switch -> byte, short, int, long, enum e string
static - class variable, field, attribute
/*default*/ -> instance variable, field, attribute


quando soma uma string null, o null vira string
Given a try statement, if both the catch block and the finally block each throw an exception, what does the caller see? -> The exception from the finally block


Error and RuntimeException is unchecked

Nao pode usar o metodo concat para strings nulas


Nao pode chamar super() e this() no mesmo construtor, ou um, ou outro, pois cada um deve aparecer na primeira linha

<char>.concat(<string>) -> compilation error

float x = 1000; //ok
float y = 1000.0; //compilation error
float z = 1000.0f; //ok
float a = (float)1000.0; //ok

For a given non-null String myTestVariable, what is the resulting value of executing the statement myTestVariable.equals(null)? -> do not compile

String - insertString()
StringBuilder - insert()

To force garbage collection to occur at a certain point call System.gc();

IOException is a checked exception type


virtual methods -> every instance method except by final, static and private

The smallest unit you can add to a LocalTime object is nanoseconds

The catch clause argument is always of type Throwable.

StringBuilder sb1 = new StringBuilder() -> will create a StringBuilder object with no characters but with an initial capacity to store 16 characters.

non-static variables cannot be on static contexts

simulado 4:
1
4
80
89
107 -> finalize() may be called zero or one times
115 -> case <constant expression(numero inteiro ou variavel final)>
157 -> voce pode declarar um metodo usando Exception como tipo de retorno - return new Exception()
usar throws simulado 4 questão 161
erro de inicializacao na variavel if e else if questao 168
questão 169
questão 172
178

IOException Herda de Exception

Exception -> try-catch ou throws
RuntimeException -> nothing

Strings são imutáveis

abstract public class X{} -> válido
final public class X{} -> válido

uma classe só pode ser pública ou package-private

O que identifica a assinatura do método é a união das informações de nome do método e parâmetros, logo os seguintes métodos listados abaixo seriam considerados erros de compilação:
public class Contas {
    public int fazerConta(int num1, int num2) { }
    public float fazerConta(int num1, int num2) { } //Erro de compilação.
}


posso usar o do-while sem {}:
    public class DoCompare {
      public static void main(String[] args){
        String[] table = {"aa", "bb", "cc"};
        int ii = 0;
        do
        while (ii < table.length)
        System.out.println(ii++);
        while (ii < table.length);
      }
    }


Para criar uma data:
LocalDate ld = LocalDate.of(<ano>, <mês(comeca do 1)>, <dia>);
ou
LocalDate ld = LocalDate.of(<ano>, Month.<mês tudo em caixa alta em ingles>, <dia>)


toda variavel de uma interface é public static final.



  public boolean sell() {
    if(price<10) {
      price++;
      return true;
    } else if(price>=10) {
      return false;
    } -> nao compila, falta o return statment, pq o else if nao e garantia
  }


metodos String x StringBuilder


trabalhar com lambdas:
java.util.function.Predicate;
java.util.stream.Collectors;


Duvidas sobre Garbage Collector:
Voce nao tem como forçar a coleta de lixo, mesmo utilizando o gc() nao é garantido que a coleta seja executada
System.gc() -> nao forca a coleta de lixo
finalie() -> pode ser chamado 0 ou 1 vez




Codigo:
interface Sword {
    public Number swing();
}
abstract class BasicSword {
    protected int baseSwing = 10;
    public Integer swing() {
        return baseSwing;
    }
}
public class MasterSword extends BasicSword implements Sword {
    private int baseSwing = 20;
    public static void main(String[] args) {
        System.out.println(new MasterSword().swing());
    }
}



Métodos sobrecarregados necessitam ter lista de parâmetros diferentes, enquanto métodos sobreescritos necessitam ter exatamente o mesmo return type.



int x() throws Exception{}
int x(){} -> override, nao precisa declarar a excecao


Existencia do metodo insert():
nao existe um metodo insert em List, voce pode usar um add(1, "xxx");
o metodo insert existe em StringBuilder



uma list so e equal a outra se os valores forem iguais e estiverem na mesma ordem


String nao e uma wrapper class


long x = 5; //compile
long x = 5L; // compile
Long x = 5; //DOES NOT COMPILE
Long x = 5L; //COMPILE


nao existe insert em String
compila e imprime 10

metodos de classes abstratas nao podem ser privates
metodos de interfaces nao podem ser privates nem protecteds

switch -> byte/Byte, short/Short, int/Integer, Enum, String e char/Character



public class Brasil {
	public static void main(String[] args) {
		String[] cidades = new String[] { "São Paulo", "Rio de Janeiro", "Belo Horizonte" };
		String[] periodo = new String[] { "Dia", "Noite" };
		for (int i = 0, j = 0; i < 1; System.out.print("-"), i++, j++) {
		    System.out.print(cidades[i] + " " + periodo[j]);
		}
    }
}
//esse codigo funciona e output: São Paulo Dia-



final Object e = new Exception();
final Exception data = (RuntimeException) e; // ClassCastException, final RuntimeException data = (Exception) e;
System.out.print(data);
Não é possível fazer o "cast" de um objeto pai para o filho, apenas o contrário.



int i = 0;
do{i++;} while(1 == 1);
System.out.println(); // DOES NOT COMPILE - Unreachable code

StringBuffer não é permitido em um loop for-each

Methods String and StringBuilder
String & StringBuilder -> charAt(), indexOf(), replace() and substring()
String -> length(), charAt(), indexOf(), substring(), toLowerCase(), toUpperCase(), equals(), equalsIgnoreCase(), startsWith(), endsWith(), contains(), replace(), trim()
StringBuilder -> append(), insert(), delete(), deleteCharAt(), reverse(), toString() - equals()


constantes em java são 'public static final', variáveis de interfaces são por padrão constantes, entao, os modificadores 'public static final' sao inseridos implicitamente

Apenas os tipos primitivos byte , short , char e int; os wrappers Character , Byte , Short e Integer; String e Enums podem constar no switch.


Decorar
Uma declaração switch pode ter qualquer número de declarações case e no máximo uma declaração default.

import java.util.*; import java.sql.*; ... Date date = new Date(); //compilation error

Nenhum data type previne o uso de return

X(int a){}...Y(int a){super()} // vc tem que declarar na classe X um construtor default explicitamente

Uma declaração try possui zero ou um bloco(s) finally e zero ou mais bloco(s) catch.

import static pacote.Classe.metodoDeClasse;

Herança permite que a classe acesse atributos e métodos comumente usados

O Java utiliza pass-by-value para enviar dados em um método.

Apesar de arrays fazerem uso de primitivos, por definição 'todo array é um objeto'.

A palavra chave "new" serve para chamar o construtor de uma classe e criar a partir desta classe uma instância. Ela 'Instancia um Objeto'.

Toda constante precisa ter um valor atribuido, senão diretamente, pode ser pelo static initialization block. private static final int x = 10;

Não é possível forçar o Garbage Collection a ocorrer, você pode apenas sugerir à JVM que ele ocorra.

O operador v-- decrementa o valor em 1 e retorna o valor original após o decremento.
O operador --v decrementa o valor em 1 e retorna o valor decrementado após o decremento.
O operador v++ incrementa o valor em 1 e retorna o valor original após o incremento.
O operador ++v incrementa o valor em 1 e retorna o valor incrementado após o incremento.

O método finalize pode ser chamado zero ou uma vez

Métodos sobrecarregados necessitam ter lista de parâmetros diferentes, enquanto métodos sobrescritos necessitam ter o return type covariante.

    String[] playlist = new String[5];
    playlist[0] = "Brave New World";
    playlist[1] = "Take The Time";
    3 objetos nesse codigo, o que define o array e as duas strings
    
    String[] os = new String[] { "Mac", "Linux", "Windows" };
    System.out.println(Arrays.binarySarch(os, "Linux"));
    O Java requere um array ordenado para fazer um "binarySearch", pode acontecer de retornar o valor 1, porém este valor não é garantido.
    
 Os tipos varargs só podem ser usados como parâmetros em um método. String... a = "ass"; // nao compila
    
try, catch e finally requerem colchetes
    
Você pode converter um primitivo a um wrapper somente de assiná-lo. "Integer i = 3;"
    
Um método com argumentos do tipo "Long" não pode receber um tipo "int"(ou até mesmo Integer), o autoboxing só seria feito se fosse um "long" a ser passado.

as classes "LocalDateTime" e "LocalTime" possuem as definições de hora, minuto e segundo.

Se houver "catch" consecutivos dentro de uma declaração "try-catch" ou houver "catch"'s dentro de outros "catch"'s é necessário diferenciar o nome da variável entre os "catch"'s.

private keyword provides the highest level of Encapsulation in Java. Though you can hide the private method in Java by declaring another private method with the same name and different method signature.
 -> nós escondemos private methods redeclarando-os.
 
 os metodos setter nao existem nos tipos Dates (LocalDate, LocalTime, LocalDateTime), pois são imutáveis.
 
 Interfaces podem implementar métodos estáticos, mas não poderam ser utilizados pela instância, apenas diretamente da interface.
 
 Uma variável static é sempre visível para todas as instâncias da classe. O único tipo de variável que está sempre visível para todas as instâncias é o static. Apesar de public parecer verdadeiro, ela não está compartilhada para todas as instâncias.
 
 Polimorfismo:
 Bird bird = new Chicken();
 bird.fly();
 se fly for um metodo estatico - chama a versão da classe Bird
 se fly for um metodo de instancia - chama a versao da classe Chicken
 a versão dos atributos sempre é a da referência
 
 
 
 
 A exceção "Exception" é uma exceção checada, portanto deve ser declarada no método ou tratada por um bloco "try-catch".
 public class Sick {
    public static void takePills() { // -> deveria ter um throws Exception aqui
    	try {
    		String pills[] = new String[2];
    		System.out.println(pills[2]);
    	} catch (RuntimeException e) {
    		System.out.println("Lost a pill!");
    	} finally {
    		throw new Exception();
    	}
    }
    public static void main(String... pills) {
    	new Sick().takePills();
    }
}

if just allows labeled breaks
switch doesn't allow continue

<= is used with numeric variables, not with boolean, it just returns a boolean
== and ! that is used with boolean variables



3: int x = 0;
4: String s = null;
5: if(x == s) System.out.println("Success");
6: else System.out.println("Failure");
int cannot be compared to a String

"Period" pode ser usado somente para períodos de dias, semanas, meses e anos, não é possível um "Period" de minutos.


A default constructor is the constructor automatically generated by JVM
class X{} -> this class has a default constructor
class Y{Y(){}} -> this class does not has a default constructor



ClassCastException
Object x = new Integer(0);
System.out.println((String)x);

67
68
97
112
113 - resolver de uma ves por todas o gc
114


    public class Capricchio {
       public static void main (String[] args) {
         Object obj = null;
         StringBuilder sb = new StringBuilder();
         sb.append(obj); // converte null p/ string
         System.out.println(sb.length());
      }
    }
    
    
    
    import java.util.*;
public class MyClass {
    public static void main(String args[]) {
          String[] names = {"Tom", "Dick", "Harry"};
    //List<String> list = names.asList();  // Line 7 - error
    List<String> list = Arrays.asList(names);
    list.set(0, "Sue");                  // Line 8
    System.out.println(names[0]);
    }
}
