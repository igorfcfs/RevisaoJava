String Class

Strings are imutable
String is a final class so it cannot be extended.

GC - Garbage Collector - O que é Java Garbage Collection? O Java garbage collection
é o processo pelo qual os programas Java executam o gerenciamento automático de
memória. Sua principal função é descartar os espaços de memória alocados que não
são mais usados pela aplicação.

public class Test {
    public static void main(String[] args) {
        String str = "Think"; //Line n3
        change(str); //Line n4
        System.out.println(str);
    }
    
    private static void change(String s) {
        s.concat("_Twice"); //Line n9
    }
}

public class Test {
	
	private static String str2;
    public static void main(String[] args) {
        String str = "Think"; //Line n3
        change(str); //Line n4
        System.out.println(Test.str2);
    }
    
    private static void change(String s) {
        Test.str2 = s.concat("_Twice"); //Line n9
    }
}
-----------------------------------------------------------------------------
Metodos para manipular Strings

public class Test {
    public static void main(String[] args) {
        String s1 = "OCP";
        String s2 = "ocp";
        System.out.println(/*INSERT*/);
    }
}

s1.equals(s2.toUpperCase());
s2.equals(s1.toLowerCase());
s1.length() = s2.length();
s1.equalsIgnoreCase(s2);
----------------------------------------------------------------------------
public class Test {
    public static void main(String[] args) {
        String text = "    BE YOURSELF!    "; //Contains multiple space characters
        System.out.println(text./*INSERT*/);
    }
}

text.trim()  -> "BE YOURSELF!"
text.strip() -> "BE YOURSELF!"
text.stripLeading() -> "BE YOURSELF!    "
text.stripTrailing() -> "    BE YOURSELF!"
text.stripLeading().stripTrailing() = "BE YOURSELF!"


replace(old char, new char)
---------------------------------------------------------------------------
substring(int beginIndex, int endIndex) is used to extract the substring.
The substring begins at "beginIndex" and extends till "endIndex - 1". 
Country code information is stored at index 4 and 5, so the correct
substring method to extract country code is: swiftCode.substring(4, 6);
---------------------------------------------------------------------------

public class Test {
    public static void main(String[] args) {
        String str = " "; //single space
        boolean b1 = str.isEmpty();
        boolean b2 = str.isBlank();
        System.out.println(b1 + " : " + b2); //Line n1
        
        str.strip(); //Line n2
        b1 = str.isEmpty();
        b2 = str.isBlank();
        System.out.println(b1 + " : " + b2); //Line n3
    }
}

isEmpty() method of String class returns true if and only if length() is 0.

isBlank() method of String class (available since Java 11) returns true if the
string is empty or contains only white space codepoints, otherwise false.

strip() method of String class (available since Java 11) returns a string whose
value is this string, with all leading and trailing white space removed.

At Line n2, `str.strip();` returns an empty string "". As String is immutable,
hence a new String object is created and 'str' still refers to " ". 
---------------------------------------------------------------------------

public class Test {
    public static void main(String[] args) {
        String s1 = new String("Java"); //Line n3
        String s2 = "JaVa"; //Line n4
        String s3 = "JaVa"; //Line n5
        String s4 = "Java"; //Line n6
        String s5 = "Java"; //Line n7
        
        int i = 1; //Line n9
        
    }
}

String s1 = new String("Java"); --> Creates 2 objects: 1 String Pool and
1 non-pool. 's1' refers to non-pool object.

String s2 = "JaVa"; --> Creates 1 String pool object and 's2' refers to it.

String s3 = "JaVa"; --> Doesn't create a new object, 's3' refers to same String
pool object referred by 's2'.

String s4 = "Java"; --> Doesn't create a new object, s4 refers to String Pool
object created at Line n3.

String s5 = "Java"; --> Doesn't create a new object, s5 also refers to String Pool object created at Line n3.


So, at Line n9, 3 String objects are available in the HEAP memory: 2 String pool
and 1 non-pool.
------------------------------------------------------------------------------
public class Test {
    public static void main(String[] args) {
        String s1 = "1Z0-819";
        String s2 = "1Z0-819" + "";
        System.out.println(s1 == s2); //true
    }
}
------------------------------------------------------------------------------
public class Test {
    public static void main(String[] args) {
        final String fName = "James";//e uma variavel constante, ou seja nao pode alterar a referencia para outro objeto String
        String lName = "Gosling";//nao e uma variavel constante, ou seja, pode alterar a referencia para um outro objeto String
        String name1 = fName + lName;//nao e uma constant expression por causa da variavel lName que nao e constante, ou seja, posso alterar sua referencia para outro objeto String
        String name2 = fName + "Gosling";//e uma expressao constante, pois concateno uma variavel do tipo String constante com um String literal
        String name3 = "James" + "Gosling";//e uma expressao constante, pois concateno duas strings literais
        System.out.println(name1 == name2);//false
        System.out.println(name2 == name3);//true
    }
}
------------------------------------------------------------------------------
public class Test {
    public static void main(String[] args) {
        String javaworld = "JavaWorld";
        String java = "Java";
        String world = "World";
        java += world;
        System.out.println(java == javaworld);
    }
}

Please note that Strings computed by concatenation at compile time, will be referred by String Pool during execution. Compile time String concatenation happens when both of the operands are compile time constants, such as literal, final variable etc.

Whereas, Strings computed by concatenation at run time (if the resultant expression is not constant expression) are newly created and therefore distinct.


`java += world;` is same as `java = java + world;` and `java + world` is not a constant expression and hence is calculated at runtime and returns a non pool String object "JavaWorld", which is referred by variable 'java'.


On the other hand, variable 'javaworld' refers to String Pool object "JavaWorld".

As both the variables 'java' and 'javaworld' refer to different String objects, hence `java == javaworld` returns false.
---------------------------------------------------------------------------------
public class Test {
    public static void main(String[] args) {
        m1(null); //compilation error - ambiguous
    }
    
    static void m1(CharSequence s) {
        System.out.println("CharSequence");
    }
    
    static void m1(String s) {
        System.out.println("String");
    }
    
    static void m1(Object s) {
        System.out.println("Object");
    }
}

Method m1 is overloaded to accept 3 different parameters: String, CharSequence and Object.

String implements CharSequence and Object is the super Parent class in Java. There is no conflict among the overloaded methods for the call m1(null) as it is mapped to the class lowest in hierarchy, which is String class. Hence, output will be "String".


Now if you add one more overloaded method, `static void m1(StringBuilder s) {...}` in the Test class, then `m1(null);` would cause compilation error as it would match to both m1(StringBuilder) and m1(String) methods. So m1(null) in that case would be ambiguous call and would cause compilation error.


For the same reason, System.out.println(null); causes compilation error as println method is overloaded to accept 3 reference types Object, String and char [] along with primitive types.

System.out.println(null); matches to both println(char[]) and println(String), so it is an ambiguous call and hence the compilation error.
