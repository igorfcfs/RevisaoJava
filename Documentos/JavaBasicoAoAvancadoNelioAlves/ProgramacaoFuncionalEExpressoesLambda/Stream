Stream
	Eh uma sequencia de elementos advinda de uma fonte de dados que oferece suporte a "operacoes agregadas".
	Fonte de dados: colecao, array, funcao de iteracao, recurso de E/S
	Sugestao de leitura:
		http://www.oracle.com/technetwork/pt/articles/java/streams-api-java-8-3410098-ptb.html

Caracteristicas
	Stream eh uma solucao para processar sequencias de dados de forma:
		Declarativa (iteracao interna: escondida do programador)
		Parallel-friendly (imutavel -> thread safe)
		Sem efeitos colaterais
		Sob demanda (lazy evaluation)
	Acesso sequencial (não há índices)
	Single-use: so pode ser "usada" uma vez
	Pipeline: operacoes em streams retornam novas streams. Então eh possivel criar uma cadeia
	de operacoes (fluxo de processamento).
	
Operacoes intermediarias e terminais
	O pipeline eh composto por zero ou mais operacoes intermediarias e uma terminal.
	Operação intermediaria:
		Produz uma nova streams (encadeamento)
		So executa quando uma operação terminal eh invocada (lazy evaluation)
		Operação terminal:
		Produz um objeto não-stream (coleção ou outro)
		Determina o fim do processamento da stream

Operacoes intermediarias
	filter
	map
	flatmap
	peek
	distinct
	sorted
	skip
	limit (*)
	* short-circuit

Operacoes terminais
	forEach
	forEachOrdered
	toArray
	reduce
	collect
	min
	max
	count
	anyMatch (*)
	allMatch (*)
	noneMatch (*)
	findFirst (*)
	findAny (*)
	* short-circuit

Criar uma stream
	Basta chamar o método stream() ou parallelStream() a partir de qualquer objeto Collection.
		https://docs.oracle.com/javase/10/docs/api/java/util/Collection.html
	Outras formas de se criar uma stream incluem:
		Stream.of
		Stream.ofNullable
		Stream.iterate

Demo - criação de streams
	List<Integer> list = Arrays.asList(3, 4, 5, 10, 7);
	Stream<Integer> st1 = list.stream();
	System.out.println(Arrays.toString(st1.toArray()));
	
	Stream<String> st2 = Stream.of("Maria", "Alex", "Bob");
	System.out.println(Arrays.toString(st2.toArray()));
	
	Stream<Integer> st3 = Stream.iterate(0, x -> x + 2);
	System.out.println(Arrays.toString(st3.limit(10).toArray()));
	
	Stream<Long> st4 = Stream.iterate(new long[]{ 0L, 1L }, p->new long[]{ p[1], p[0]+p[1] }).map(p -> p[0]);

	System.out.println(Arrays.toString(st4.limit(10).toArray()));
